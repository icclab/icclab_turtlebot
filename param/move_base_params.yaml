# Move base node parameters. For full documentation of the parameters in this file, please see
#
#  http://www.ros.org/wiki/move_base
#
shutdown_costmaps: true

controller_frequency: 5.0
controller_patience: 3.0


planner_frequency: 1.0
planner_patience: 5.0

oscillation_timeout: 10.0
oscillation_distance: 0.2

# local planner - default is trajectory rollout
base_local_planner: "dwa_local_planner/DWAPlannerROS"

base_global_planner: "navfn/NavfnROS" #alternatives: global_planner/GlobalPlanner, carrot_planner/CarrotPlanner


#We plan to integrate recovery behaviors for turtlebot but currently those belong to gopher and still have to be adapted.
## recovery behaviors; we avoid spinning, but we need a fall-back replanning
recovery_behavior_enabled: true

# execute `rospack plugins --attrib=plugin nav_core | grep recovery` to look at all available recovery plugins
recovery_behaviors:
  - name: 'super_aggressive_reset'
    type: 'clear_total_costmap_recovery/ClearTotalCostmapRecovery' # reverts all costmaps to the static map
    # code for plugin -> https://github.com/icclab/clear_total_costmap_recovery
  #- name: 'super_conservative_reset'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'conservative_reset'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'aggressive_reset'
    #type: 'clear_costmap_recovery/ClearCostmapRecovery'
  #- name: 'clearing_rotation'
    #type: 'rotate_recovery/RotateRecovery'
    
# Clear costmap recovery reverts costmap to static map outside reset_distance and clears unknown space around the robot
# NOTE: costmap clearing only works if there is a static layer in the costmap

#super_conservative_reset: # distance from robot beyond which obstacles will be cleared from costmap
  #reset_distance: 3.0
  #layer_names: ["obstacle_layer"]
#conservative_reset: 
  #reset_distance: 2.0
  #layer_names: ["obstacle_layer"]
#aggressive_reset:
  #reset_distance: 0.0
  #layer_names: ["obstacle_layer"]
